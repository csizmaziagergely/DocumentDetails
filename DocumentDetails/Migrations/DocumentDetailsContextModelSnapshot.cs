// <auto-generated />
using System;
using DocumentDetails;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocumentDetails.Migrations
{
    [DbContext(typeof(DocumentDetailsContext))]
    partial class DocumentDetailsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DocumentDetails.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Extension")
                        .HasColumnType("int")
                        .HasColumnName("extension");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("main_id");

                    b.Property<int>("Source")
                        .HasColumnType("int")
                        .HasColumnName("source");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("dokumentumok", (string)null);
                });

            modelBuilder.Entity("DocumentDetails.Entities.DocumentLog", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("dokumentum_id");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("esemeny_id");

                    b.Property<DateTime>("HappenedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("happened_at");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EventId");

                    b.ToTable("naplo", (string)null);
                });

            modelBuilder.Entity("DocumentDetails.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("esemeny", (string)null);
                });

            modelBuilder.Entity("DocumentDetails.Entities.Document", b =>
                {
                    b.HasOne("DocumentDetails.Entities.Document", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DocumentDetails.Entities.DocumentLog", b =>
                {
                    b.HasOne("DocumentDetails.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentDetails.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Event");
                });
#pragma warning restore 612, 618
        }
    }
}
